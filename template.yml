---
AWSTemplateFormatVersion: 2010-09-09

Description: A bridge from the IMS event bus to a HTTP/S endpoint.

Transform:
- AWS::Serverless-2016-10-31

# Metadata to use for the publishing to the SAR
Metadata:
  AWS::ServerlessRepo::Application:
    Name: thetis-ims-https-bridge
    Description:  An application for sending events as webhook calls
    Author: thetis-apps
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['thetis-ims']
    HomePageUrl: https://github.com/thetis-apps/Webhook
    SemanticVersion: 0.0.0
    SourceCodeUrl: https://github.com/thetis-apps/Webhook

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs12.x

Parameters:
  ContextId:
    Type: String
    Description: Only bridge events regarding context with this id.
    MinLength: '1'
  ClientId:
    Description: Key of the parameter that has your Thetis client id as its value.
    Type: AWS::SSM::Parameter::Value<String>
    Default: ThetisClientId
  ClientSecret:
    Description: Key of the parameter that has your Thetis client secret as its value.
    Type: AWS::SSM::Parameter::Value<String>
    Default: ThetisClientSecret
  ApiKey:
    Description: The api key that gives access to the context in Thetis IMS.
    Type: String
    MinLength: 1
  DevOpsEmail:
    Description: The email address to send mail to when messages in the dead letter queue.
    Type: String
    MinLength: 4
    
Resources:
  EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 144
      VisibilityTimeout: 300
  EventRule:
    Type: AWS::Events::Rule 
    Properties:
      EventPattern:
        source:
        - public.thetis-ims.com
        detail:
          contextId:
          - Ref: ContextId
      Targets:
      - Id: Target
        Arn: !GetAtt EventQueue.Arn
        SqsParameters: 
          MessageGroupId: "SINGLETON"

  EventPermission:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - Ref: EventQueue
      PolicyDocument: 
        Statement: 
          - Action: SQS:SendMessage 
            Effect: Allow
            Resource: !GetAtt EventQueue.Arn
            Principal: 
              Service: events.amazonaws.com 
      
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handler.eventHandler
      Environment:
        Variables:
          ClientId:
            Ref: ClientId
          ClientSecret:
            Ref: ClientSecret
          ApiKey:
            Ref: ApiKey
          ContextId:
            Ref: ContextId
      Events:
        EventQueued:
          Type: SQS
          Properties:
            BatchSize: 1
            Enabled: true
            Queue: !GetAtt EventQueue.Arn
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties: 
      FifoQueue: true
  Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when any message is moved to the dead letter queue.
      AlarmActions:
      - Ref: IncidentTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Period: 60
      Namespace: AWS/SQS
      Threshold: '0'
      Unit: Count
      Dimensions:
      - Name: QueueName
        Value:
          Fn::GetAtt:
          - DeadLetterQueue
          - QueueName
      TreatMissingData: notBreaching
      Statistic: Maximum
  IncidentTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: 
          Ref: DevOpsEmail        
        Protocol: email
      DisplayName: Incidents to be handled by Thetis Devops.
